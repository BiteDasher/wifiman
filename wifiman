#!/bin/bash
if [ -z "$(command -v wpa_supplicant)" ]; then echo -e "\033[0;31mWPA_Supplicant not found.\033[0m"; exit; fi
if [ -z "$(command -v ifconfig)" ]; then echo -e "\033[0;31mnet-tools not found.\033[0m"; exit; fi
if [ -z "$(command -v iwconfig)" ]; then echo -e "\033[0;31mwireless-tools not found.\033[0m"; exit; fi
if [ -z "$(command -v sed)" ]; then echo -e "\033[0;31msed not found.\033[0m;"; exit; fi
if [ $UID == 0 ]; then true; else echo "Run this script only as root."; exit; fi
if [ ! -d /etc/wifiman0 ]; then mkdir /etc/wifiman0; else true; fi
if [ "$(ls -ld /etc/wifiman0 | cut -d' ' -f 1)" != "drwxr-----" ]; then chmod 740 /etc/wifiman0; fi
if [ -n "$(rfkill -r | grep -Eo "wlan * blocked *")" ]; then
echo "It seems like your WLAN interface(s) blocked by something. Use rfkill unblock INTERFACE"
cont=1
fi
[[ $cont == 1 ]] && echo "Continue anyway?" && read ques && case $ques in Y*|y*) unset cont ;; *) exit ;; esac;
if [ $1 ]; then INTMOD=1
case "$1" in
-h|--help)
echo "-l/--list to list of available ESSID's
-cp/--create-profile [ ESSID, Interface, password ] to creating new Wi-Fi profile using wpa_supplicant
-lp/--list-profiles to view existing profiles
-dp/--delete-profile to delete existing profile
-c/--connect to connect using existing profile
-d/--disconnect to disconnect using existing profile
-sp/--show-password to show password from network profile"
;;
-l|--list)
iwlist scan 2>/dev/null | grep ESSID | sed 's/.*://' |  sed -e 's/"//g' && true
;;
-cp|--create-profile)
essid_name=$2
interface_name=$3
essid_password=$4
if [ -z "$2" ]; then echo "second argument lost"; exit; fi
if [ -z "$3" ]; then echo "third argument lost"; exit; fi
if [ -z "$4" ]; then essid_password="key_mgmt=NONE"; else essid_password="psk=\"$4\""; fi
if [ "$interface_name" != "$(ifconfig -a | sed 's/[ \t].*//;/^$/d' | tr -d ":" | grep -x $interface_name)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$interface_name\033[0m \033[1;31mis not existing interface.\033[0m"; exit; fi
if [ "$essid_name" != "$(sudo iwlist scan 2>/dev/null | grep ESSID | sed 's/.*://' | sed -e 's/"//g' | grep -x $essid_name)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$essid_name\033[0m \033[1;31mis not existing ESSID network or it doesn't shows up.\033[0m"; exit; fi
cat <<EOF > /etc/wifiman0/${essid_name}.conf
network={
	ssid="${essid_name}"
	${essid_password}
}
EOF
cat <<EOF > /etc/wifiman0/${essid_name}.bashconf.sh
#!/bin/bash
wpa_supplicant -c /etc/wifiman0/${essid_name}.conf -i ${interface_name} &
dhclient ${interface_name} &
dhclient ${interface_name} -r &
EOF
chmod +x /etc/wifiman0/${essid_name}.bashconf.sh
cat <<EOF > /etc/systemd/system/wifiman0-${essid_name}.service
[Unit]
Description=WifiMan0

[Service]
Type=forking
ExecStart=/etc/wifiman0/${essid_name}.bashconf.sh

[Install]
WantedBy=multi-user.target
EOF
echo -e "\033[1;32mConfiguration file created.\033[0m"
exit
;;
-lp|--list-profiles)
ls /etc/wifiman0 | cut -d'.' -f 1 | sort -u
;;
-dp|--delete-profile)
essid_toremove=$2
if [ -z "$2" ]; then echo "second argument lost"; exit; fi
if [ "$essid_toremove" != "$(ls /etc/wifiman0 | tr ' ' '\n' | cut -d '.' -f 1 | sort -u | grep -x $essid_toremove)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$essid_toremove\033[0m \033[1;31mis not exists.\033[0m"; exit; fi
if [ "$(systemctl is-active wifiman0-${essid_toremove}.service)" == active ]; then systemctl stop wifiman0-${essid_toremove}.service; else true; fi
rm /etc/systemd/system/wifiman0-${essid_toremove}.service
rm /etc/wifiman0/${essid_toremove}.conf
rm /etc/wifiman0/${essid_toremove}.bashconf.sh
echo -e "\033[1;32mProfile of \033[0;33m${essid_toremove}\033[0m \033[1;32mwas removed.\033[0m"
;;
-c|--connect)
essid_con=$2
if [ -z "$2" ]; then echo "second argument lost"; exit; fi
if [ "$essid_con" != "$(ls /etc/wifiman0 | tr ' ' '\n' | cut -d '.' -f 1 | sort -u | grep -x $essid_con)" ]; then printf "\033[1;31mIt seems like \033[0;33m$essid_con\033[0m \033[1;31mprofile doesn't exists.\033[0m"; exit; fi
if [ -n "$(systemctl is-active wifiman0-* | grep -x active)" ]; then echo "Turning off other profile"; systemctl stop wifiman0-*; else true; fi
systemctl start wifiman0-${essid_con}.service
if [ $? == 1 ]; then
echo -e "\033[0;31mSomething went wrong. (systemctl status wifiman0-${essid_con}.service)\033[0m"
else echo "Done"
fi
;;
-d|--disconnect)
if [ -n "$(systemctl is-active wifiman0-* | grep -x active)" ]; then
systemctl stop wifiman0-* &>/dev/null
echo "Done"
else
if [ -n "$(pidof wpa_supplicant)" ]; then killall wpa_supplicant; else
echo -e "\033[1;36mWifiMan doesn't running.\033[0m"; exit; fi; fi
;;
-sp|--show-password)
essid_ps=$2
if [ -z "$2" ]; then echo "second argument lost"; exit; fi
if [ "$essid_ps" != "$(ls /etc/wifiman0 | tr ' ' '\n' | cut -d '.' -f 1 | sort -u | grep -x $essid_ps)" ]; then printf "\033[1;31mIt seems like \033[0;33m$essid_ps\033[0m \033[1;31mprofile doesn't exists.\033[0m"; exit; fi
if [ -n "$(cat /etc/wifiman0/$essid_ps.conf | sed '3!d' | sed "s/.*key_mgmt=//" | grep -x NONE)" ]; then echo "This network doesn't use a password."; else
cat /etc/wifiman0/$essid_ps.conf | sed '1d; 2d; $d' | cut -d "\"" -f2- | sed 's/.$//'
fi
;;
*)
echo "Unknown argument"
exit
;;
esac
fi
startdialog() {
echo "Choose what to do"
echo "0. List available ESSID's
1. Create Wi-Fi profile using wpa_supplicant
2. List profiles
3. Delete existing profile
4. Connect using existing profile
5. Disconnect using existing profile
6. Get password from profile
7. Exit"
}
readthis() {
read -rp "> " $1
}
justcases() {
case $uclike in
0)
iwlist scan 2>/dev/null | grep ESSID | sed 's/.*://' |  sed -e 's/"//g' && true
read
startdialog
readthis uclike
justcases
;;
1)
echo "Which interface to configure?(write carefully)"
ifconfig -a | sed 's/[ \t].*//;/^$/d' | tr -d ":"
readthis interface_name
if [ $interface_name ]; then true; else echo "lost argument"; exit; fi
if [ "$interface_name" != "$(ifconfig -a | sed 's/[ \t].*//;/^$/d' | tr -d ":" | grep -x $interface_name)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$interface_name\033[0m \033[1;31mis not existing interface.\033[0m"
startdialog
readthis uclike
justcases; else true; fi
echo "Which netwotk to configure(ESSID)"
readthis essid_name
if [ $essid_name ]; then true; else echo "lost argument"; exit; fi
if [ "$essid_name" != "$(sudo iwlist scan 2>/dev/null | grep ESSID | sed 's/.*://' | sed -e 's/"//g' | grep -x $essid_name)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$essid_name\033[0m \033[1;31mis not existing ESSID network or it doesn't shows up.\033[0m";
startdialog
readthis uclike
justcases
else true; fi
echo "What is the password for the network?"
readthis essid_password
if [ -z "$essid_password" ]; then essid_password="key_mgmt=NONE"; else essid_password="psk=\"$essid_password\""; fi
cat <<EOF > /etc/wifiman0/${essid_name}.conf
network={
	ssid="${essid_name}"
	${essid_password}
}
EOF
cat <<EOF > /etc/wifiman0/${essid_name}.bashconf.sh
#!/bin/bash
wpa_supplicant -c /etc/wifiman0/${essid_name}.conf -i ${interface_name} &
dhclient ${interface_name} &
dhclient ${interface_name} -r &
EOF
chmod +x /etc/wifiman0/${essid_name}.bashconf.sh
cat <<EOF > /etc/systemd/system/wifiman0-${essid_name}.service
[Unit]
Description=WifiMan0

[Service]
Type=forking
ExecStart=/etc/wifiman0/${essid_name}.bashconf.sh

[Install]
WantedBy=multi-user.target
EOF
echo -e "\033[1;32mConfiguration file created.\033[0m"
exit
;;
2)
ls /etc/wifiman0 | cut -d'.' -f 1 | sort -u
echo " "
startdialog
readthis uclike
justcases
;;
3)
echo "Which to remove?"
readthis essid_toremove
if [ $essid_toremove ]; then true; else echo "lost argument"; exit; fi
if [ "$essid_toremove" != "$(ls /etc/wifiman0 | tr ' ' '\n' | cut -d '.' -f 1 | sort -u | grep -x $essid_toremove)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$essid_toremove\033[0m \033[1;31mis not exists.\033[0m"
startdialog
readthis uclike
justcases; else true; fi
if [ "$(systemctl is-active wifiman0-${essid_toremove}.service)" == active ]; then systemctl stop wifiman0-${essid_toremove}.service; else true; fi
rm /etc/systemd/system/wifiman0-${essid_toremove}.service
rm /etc/wifiman0/${essid_toremove}.conf
rm /etc/wifiman0/${essid_toremove}.bashconf.sh
echo -e "\033[1;32mProfile of \033[0;33m${essid_toremove}\033[0m \033[1;32mwas removed.\033[0m"
startdialog
readthis uclike
justcases
;;
4)
echo "Which network to connect?"
readthis essid_con
if [ $essid_con ]; then true; else echo "lost argument"; exit; fi
if [ "$essid_con" != "$(ls /etc/wifiman0 | tr ' ' '\n' | cut -d '.' -f 1 | sort -u | grep -x $essid_con)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$essid_con\033[0m \033[1;31mprofile doesn't exists.\033[0m"
startdialog
readthis uclike
justcases; else true; fi
if [ -n "$(systemctl is-active wifiman0-* | grep -x active)" ]; then echo "Turning off other profile"; systemctl stop wifiman0-*; else true; fi
systemctl start wifiman0-${essid_con}.service ||
echo -e "\033[0;31mSomething went wrong. (systemctl status wifiman0-${essid_con}.service)\033[0m";
exit
;;
5)
if [ -n "$(systemctl is-active wifiman0-* | grep -x active)" ]; then
systemctl stop wifiman0-* &>/dev/null
else
if [ -n "$(pidof wpa_supplicant)" ]; then killall wpa_supplicant; else
echo -e "\033[1;36mWifiMan doesn't running.\033[0m"
startdialog
readthis uclike
justcases
fi
fi
;;
6)
if [ -z "$(ls /etc/wifiman0)" ]; then echo -e "\033[0;31mNo profiles found.\033[0m"; startdialog; readthis uclike; justcases; fi
echo "Which password to see?"
readthis essid_ps
if [ $essid_ps ]; then true; else echo "lost argument"; exit; fi
if [ "$essid_ps" != "$(ls /etc/wifiman0 | tr ' ' '\n' | cut -d '.' -f 1 | sort -u | grep -x $essid_ps)" ]; then echo -e "\033[1;31mIt seems like \033[0;33m$essid_ps\033[0m \033[1;31mprofile doesn't exists.\033[0m"
startdialog; readthis uclike; justcases; else true; fi
if [ "$(cat /etc/wifiman0/$essid_ps.conf | sed '3!d' | sed "s/.*key_mgmt=//" | grep -x NONE)" ]; then echo "This network doesn't use a password."; else
cat /etc/wifiman0/$essid_ps.conf | sed '1d; 2d; $d' | cut -d "\"" -f2- | sed 's/.$//'
read
startdialog
readthis uclike
justcases
fi
;;
7)
exit
;;
*)
echo "Uknown argument"
startdialog
readthis uclike
justcases
;;
esac
}
if [ ! $INTMOD ]; then
if [ -n "$(systemctl is-active wifiman0-*.service | grep -x active)" ]; then echo -e "\033[1;33mCurrently, network is working through WifiMan\033[0m"; else true; fi
startdialog
readthis uclike
justcases
fi
